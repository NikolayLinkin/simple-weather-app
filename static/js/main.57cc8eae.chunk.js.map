{"version":3,"sources":["serviceWorker.js","reducers/weather.js","constants/ActionsTypes.js","reducers/index.js","store/createStore.js","index.js","components/Tab.js","components/Tabs.js","utils/date.js","components/WeekItem.js","components/WeekItems.js","components/Today.js","components/Home.js","utils/api.js","constants/ApiConstants.js","selectors/weatherSelectors.js","actions/weatherActions.js","containers/HomeContainer.js"],"names":["Boolean","window","location","hostname","match","initialState","woeid","consolidatedWeather","time","sunRise","sunSet","today","activeTab","weather","state","action","type","rootReducer","combineReducers","configureStore","composedEnhancers","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","Component","Tab","name","onClickTab","className","onClick","Tabs","weekDays","monthNames","dateFormatForReq","date","getFullYear","getMonth","getDate","WeekItem","monthNumber","dayNumber","weekItem","weatherStateAbbr","weatherStateName","minTemp","maxTemp","applicableDate","Date","getDay","toFixed","src","alt","WeekItems","weekItems","this","props","map","item","key","id","Today","fetchTodayWeathers","theTemp","created","Object","keys","length","Home","openTab","bind","fetchLocation","tabName","switchTabs","callApi","url","options","fetch","then","response","ok","json","Promise","reject","text","error","camelize","catch","API_ROOT","SEARCH_CITY_URL","cityName","WEEK_WEATHER_URL","TODAY_WEATHER_URL","getWeatherWeekItems","getWoeid","getTodayWeather","getActiveTab","fetchLocationSuccess","fetchWeekWeathersSuccess","fetchWeekWeathers","dispatch","a","connect","getState","todayWeather","HomeContainer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57cc8eae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from \"../constants/ActionsTypes\";\r\n\r\nconst initialState = {\r\n    woeid: null,\r\n    consolidatedWeather: [],\r\n    time: null,\r\n    sunRise: null,\r\n    sunSet: null,\r\n    today: {},\r\n    activeTab: 'week'\r\n};\r\n\r\nconst weather = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case types.FETCH_LOCATION_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                woeid: action.woeid,\r\n            }\r\n        }\r\n        case types.FETCH_WEEK_WEATHERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                consolidatedWeather: action.consolidatedWeather,\r\n                time: action.time,\r\n                sunRise: action.sunRise,\r\n                sunSet: action.sunSet,\r\n            }\r\n        }\r\n        case types.FETCH_TODAY_WEATHERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                today: action.today,\r\n            }\r\n        }\r\n        case types.SWITCH_TABS: {\r\n            return {\r\n                ...state,\r\n                activeTab: action.activeTab,\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default weather;","export const FETCH_LOCATION = \"FETCH_LOCATION\";\r\nexport const FETCH_LOCATION_SUCCESS = \"FETCH_LOCATION_SUCCESS\";\r\n\r\nexport const FETCH_WEEK_WEATHERS_SUCCESS = \"FETCH_WEEK_WEATHERS_SUCCESS\";\r\n\r\n\r\nexport const FETCH_TODAY_WEATHERS_SUCCESS = \"FETCH_TODAY_WEATHERS_SUCCESS\";\r\nexport const FETCH_TODAY_WEATHERS_ERROR = \"FETCH_TODAY_WEATHERS_ERROR\";\r\n\r\nexport const SWITCH_TABS = \"SWITCH_TABS\";","import {combineReducers} from \"redux\";\r\nimport weather from './weather';\r\n\r\nconst rootReducer = combineReducers({\r\n    weather,\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const composedEnhancers = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\n    const store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\n    if(module.hot) {\r\n        module.hot.accept('../reducers', () => {\r\n            store.replaceReducer(rootReducer);\r\n        })\r\n    }\r\n\r\n    return store;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"normalize.css\";\nimport './index.scss';\n\nimport createStore from \"./store/createStore\";\n\nimport {Provider} from \"react-redux\";\nimport {AppContainer} from \"react-hot-loader\";\nimport HomeContainer from \"./containers/HomeContainer\";\n\nconst render = (Component) => {\n    ReactDOM.render(\n        <AppContainer>\n            <Provider store={createStore()}>\n                <Component/>\n            </Provider>\n        </AppContainer>,\n        document.getElementById('root')\n    );\n};\n\nrender(HomeContainer);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\n\r\nconst Tab = ({activeTab, name, onClickTab}) => {\r\n    return (\r\n        <span\r\n            className={`${activeTab === name ? 'tabs__tab tabs__tab--active' : 'tabs__tab'}`}\r\n            onClick={() => {onClickTab(name)}}>\r\n            {name}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Tab;","import React from \"react\";\r\nimport Tab from \"./Tab\";\r\n\r\nconst Tabs = ({activeTab, onClickTab}) => {\r\n    return (\r\n        <div className=\"tabs\">\r\n            <Tab name=\"today\" onClickTab={onClickTab} activeTab={activeTab}/>\r\n            <Tab name=\"week\" onClickTab={onClickTab} activeTab={activeTab}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tabs;","const weekDays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\r\nexport const getWeekDay = dayNumber => weekDays[dayNumber];\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nexport const getMonthName = monthNumber => monthNames[monthNumber];\r\n\r\nexport const dateFormatForReq = date => `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}/`;","import React from \"react\";\r\nimport {getWeekDay, getMonthName} from \"../utils/date\";\r\n\r\nconst WeekItem = ({weekItem}) => {\r\n\r\n    const {\r\n        weatherStateName,\r\n        weatherStateAbbr,\r\n        minTemp,\r\n        maxTemp,\r\n        applicableDate,\r\n    } = weekItem;\r\n\r\n    const date = new Date(applicableDate);\r\n    return (\r\n        <div className={`week-item week-item--${weatherStateAbbr}`}>\r\n            <div className=\"week-item__date\">\r\n                <div className=\"week-item__week-day\">\r\n                    {getWeekDay(date.getDay())}\r\n                </div>\r\n                <div className=\"week-item__month-day\">\r\n                    {date.getDate()} {getMonthName(date.getMonth())}\r\n                </div>\r\n            </div>\r\n            <div className=\"week-item__temp\">\r\n                <span className=\"week-item__temp__max\">\r\n                    {maxTemp.toFixed(0)}\r\n                </span>\r\n                /\r\n                <span className=\"week-item__temp__min\">\r\n                    {minTemp.toFixed(0)}\r\n                </span>\r\n                <img src={`https://www.metaweather.com/static/img/weather/png/64/${weatherStateAbbr}.png`} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default WeekItem;","import React, {Component} from \"react\";\r\nimport WeekItem from \"./WeekItem\";\r\n\r\nclass WeekItems extends Component {\r\n    render() {\r\n        const {weekItems} = this.props;\r\n\r\n        return (\r\n            <div className=\"weather__week\">\r\n                {weekItems.map(item =>\r\n                    <WeekItem key={item.id} weekItem={item}/>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeekItems;","import React, {Component} from \"react\";\r\n\r\nclass Today extends Component {\r\n    componentDidMount() {\r\n        const {fetchTodayWeathers, woeid} = this.props;\r\n        fetchTodayWeathers(woeid, new Date());\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            minTemp,\r\n            maxTemp,\r\n            theTemp,\r\n            created,\r\n            applicableDate,\r\n            weatherStateAbbr,\r\n            weatherStateName\r\n        } = this.props.today;\r\n        if(Object.keys(this.props.today).length) {\r\n            return (\r\n                <div className={`weather__today weather__today--${weatherStateAbbr}`}>\r\n                    <div className=\"weather__today__last-update\">\r\n                        {created}\r\n                    </div>\r\n                    <div className=\"weather__today__date\">\r\n                        {applicableDate}\r\n                    </div>\r\n                    <img src={weatherStateName} alt=\"\"/>\r\n                    <div className=\"weather__today__temp\">\r\n                        <span>{theTemp.toFixed(0)}</span>\r\n                        <span>\r\n                    {maxTemp.toFixed(0)}/{minTemp.toFixed(0)}\r\n                </span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {return (<div>Загрузка</div>)}\r\n    }\r\n}\r\nexport default Today;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Tabs from \"./Tabs\";\r\nimport WeekItems from \"./WeekItems\";\r\nimport Today from \"./Today\";\r\n\r\nclass Home extends Component {\r\n    static propTypes = {\r\n        weekItems: PropTypes.array,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            openTab: 'week'\r\n        };\r\n\r\n        this.onClickTab = this.onClickTab.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const {fetchLocation} = this.props;\r\n\r\n        fetchLocation('moscow');\r\n    }\r\n\r\n    onClickTab(tabName) {\r\n        const {\r\n            switchTabs,\r\n            activeTab,\r\n        } = this.props;\r\n\r\n        if(activeTab !== tabName) {\r\n            switchTabs(tabName);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            weekItems,\r\n            fetchTodayWeathers,\r\n            woeid,\r\n            activeTab,\r\n            today,\r\n        } = this.props;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Tabs activeTab={activeTab} onClickTab={this.onClickTab}/>\r\n                {activeTab === 'week' ?\r\n                    <WeekItems woeid={woeid}\r\n                               weekItems={weekItems}\r\n                    />\r\n                    : ''}\r\n                {activeTab === 'today' ?\r\n                    <Today fetchTodayWeathers={fetchTodayWeathers}\r\n                           woeid={woeid}\r\n                           today={today}\r\n                    />: ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import camelize from \"camelize\";\r\n\r\nexport const callApi = (url, options) => {\r\n    return fetch(url, options)\r\n        .then(\r\n            response => response.ok ? response.json() : Promise.reject(response.text()),\r\n            error => Promise.reject(error),\r\n        )\r\n        .then(\r\n            json => ({json: camelize(json)}),\r\n            error => ({error}),\r\n        )\r\n        .catch(error => (camelize(error)))\r\n};","const API_ROOT = \"https://cors-anywhere.herokuapp.com/metaweather.com\";\r\n\r\nexport const SEARCH_CITY_URL = cityName => `${API_ROOT}/api/location/search/?query=${cityName}`;\r\nexport const WEEK_WEATHER_URL = woeid => `${API_ROOT}/api/location/${woeid}/`;\r\nexport const TODAY_WEATHER_URL = (woeid, date) => `${API_ROOT}/api/location/${woeid}/${date}`;","export const getWeatherWeekItems = state => state.weather.consolidatedWeather;\r\nexport const getWoeid = state => state.weather.woeid;\r\nexport const getTodayWeather = state => state.weather.today;\r\nexport const getActiveTab = state => state.weather.activeTab;","import * as types from \"../constants/ActionsTypes\";\r\nimport {callApi} from \"../utils/api\";\r\nimport {dateFormatForReq} from \"../utils/date\";\r\n\r\nimport {\r\n    SEARCH_CITY_URL,\r\n    WEEK_WEATHER_URL,\r\n    TODAY_WEATHER_URL,\r\n} from \"../constants/ApiConstants\";\r\n\r\nimport {getTodayWeather} from \"../selectors/weatherSelectors\";\r\n\r\nconst fetchLocationSuccess = woeid => ({\r\n    type: types.FETCH_LOCATION_SUCCESS,\r\n    woeid,\r\n});\r\n\r\nexport const fetchLocation = (cityName) => async dispatch => {\r\n    const {json} = await callApi(SEARCH_CITY_URL(cityName));\r\n    const {woeid} = json[0];\r\n\r\n    dispatch(fetchLocationSuccess(woeid));\r\n    dispatch(fetchWeekWeathers(woeid));\r\n};\r\n\r\nconst fetchWeekWeathersSuccess = (consolidatedWeather, time, sunRise, sunSet) => ({\r\n    type: types.FETCH_WEEK_WEATHERS_SUCCESS,\r\n    consolidatedWeather,\r\n    time,\r\n    sunRise,\r\n    sunSet,\r\n});\r\n\r\nexport const fetchWeekWeathers = woeid => async dispatch => {\r\n    const {json} = await (callApi(WEEK_WEATHER_URL(woeid)));\r\n\r\n    const {consolidatedWeather, time, sunRise, sunSet} = json;\r\n\r\n    dispatch(fetchWeekWeathersSuccess(consolidatedWeather, time, sunRise, sunSet));\r\n};\r\n\r\nconst fetchTodayWeathersSuccess = (today) => ({\r\n    type: types.FETCH_TODAY_WEATHERS_SUCCESS,\r\n    today,\r\n});\r\n\r\nexport const fetchTodayWeathers = (woeid, date) => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const todayWeather = getTodayWeather(state);\r\n\r\n    if(!Object.keys(todayWeather).length) {\r\n        const {json} = await callApi(TODAY_WEATHER_URL(woeid, dateFormatForReq(date)));\r\n\r\n        dispatch(fetchTodayWeathersSuccess(json[0]));\r\n    }\r\n};\r\n\r\nexport const switchTabs = activeTab => dispatch => {\r\n    dispatch({type: types.SWITCH_TABS, activeTab,});\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Home from \"../components/Home\";\r\n\r\nimport {\r\n    fetchLocation,\r\n    fetchTodayWeathers,\r\n    switchTabs,\r\n    fetchWeekWeathers,\r\n} from \"../actions/weatherActions\";\r\nimport {\r\n    getWeatherWeekItems,\r\n    getWoeid,\r\n    getTodayWeather,\r\n    getActiveTab,\r\n} from \"../selectors/weatherSelectors\";\r\n\r\nconst HomeContainer = props => <Home {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weekItems: getWeatherWeekItems(state),\r\n        woeid: getWoeid(state),\r\n        today: getTodayWeather(state),\r\n        activeTab: getActiveTab(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchLocation,\r\n    fetchTodayWeathers,\r\n    switchTabs,\r\n    fetchWeekWeathers,\r\n})(HomeContainer);"],"sourceRoot":""}