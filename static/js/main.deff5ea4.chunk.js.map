{"version":3,"sources":["serviceWorker.js","reducers/weather.js","constants/ActionsTypes.js","reducers/index.js","store/createStore.js","index.js","utils/date.js","components/WeekItem.js","components/WeekItems.js","components/Home.js","utils/api.js","constants/ApiConstants.js","actions/weatherActions.js","selectors/weatherSelectors.js","containers/HomeContainer.js"],"names":["Boolean","window","location","hostname","match","initialState","woeid","consolidatedWeather","time","sunRise","sunSet","weather","state","action","type","rootReducer","combineReducers","configureStore","composedEnhancers","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","Component","weekDays","monthNames","WeekItem","monthNumber","dayNumber","weekItem","weatherStateAbbr","weatherStateName","minTemp","maxTemp","applicableDate","date","Date","className","getDay","getDate","getMonth","toFixed","src","alt","WeekItems","weekItems","map","item","key","id","Home","fetchLocation","this","props","callApi","url","options","fetch","then","response","ok","json","Promise","reject","text","error","camelize","catch","API_ROOT","SEARCH_CITY_URL","cityName","WEEK_WEATHER_URL","fetchLocationSuccess","fetchWeekWeathersSuccess","fetchWeekWeathers","dispatch","a","getWeatherWeekItems","connect","HomeContainer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.deff5ea4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from \"../constants/ActionsTypes\";\r\n\r\nconst initialState = {\r\n    woeid: null,\r\n    consolidatedWeather: [],\r\n    time: null,\r\n    sunRise: null,\r\n    sunSet: null,\r\n};\r\n\r\nconst weather = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case types.FETCH_LOCATION_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                woeid: action.woeid,\r\n            }\r\n        }\r\n        case types.FETCH_WEEK_WEATHERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                consolidatedWeather: action.consolidatedWeather,\r\n                time: action.time,\r\n                sunRise: action.sunRise,\r\n                sunSet: action.sunSet,\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default weather;","export const FETCH_LOCATION = \"FETCH_LOCATION\";\r\nexport const FETCH_LOCATION_SUCCESS = \"FETCH_LOCATION_SUCCESS\";\r\n\r\nexport const FETCH_WEEK_WEATHERS_SUCCESS = \"FETCH_WEEK_WEATHERS_SUCCESS\";\r\nexport const FETCH_TODAY_WEATHERS_SUCCESS = \"FETCH_TODAY_WEATHERS_SUCCESS\";\r\n","import {combineReducers} from \"redux\";\r\nimport weather from './weather';\r\n\r\nconst rootReducer = combineReducers({\r\n    weather,\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const composedEnhancers = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\n    const store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\n    if(module.hot) {\r\n        module.hot.accept('../reducers', () => {\r\n            store.replaceReducer(rootReducer);\r\n        })\r\n    }\r\n\r\n    return store;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"normalize.css\";\r\nimport './index.scss';\r\n\r\nimport createStore from \"./store/createStore\";\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport {AppContainer} from \"react-hot-loader\";\r\nimport HomeContainer from \"./containers/HomeContainer\";\r\n\r\nconst render = (Component) => {\r\n    ReactDOM.render(\r\n        <AppContainer>\r\n            <Provider store={createStore()}>\r\n                <Component/>\r\n            </Provider>\r\n        </AppContainer>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrender(HomeContainer);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","const weekDays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\r\nexport const getWeekDay = dayNumber => weekDays[dayNumber];\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nexport const getMonthName = monthNumber => monthNames[monthNumber];","import React from \"react\";\r\nimport {getWeekDay, getMonthName} from \"../utils/date\";\r\n\r\nconst WeekItem = ({weekItem}) => {\r\n\r\n    const {\r\n        weatherStateName,\r\n        weatherStateAbbr,\r\n        minTemp,\r\n        maxTemp,\r\n        applicableDate,\r\n    } = weekItem;\r\n\r\n    const date = new Date(applicableDate);\r\n    return (\r\n        <div className={`week-item week-item--${weatherStateAbbr}`}>\r\n            <div className=\"week-item__date\">\r\n                <div className=\"week-item__week-day\">\r\n                    {getWeekDay(date.getDay())}\r\n                </div>\r\n                <div className=\"week-item__month-day\">\r\n                    {date.getDate()} {getMonthName(date.getMonth())}\r\n                </div>\r\n            </div>\r\n            <div className=\"week-item__temp\">\r\n                <span className=\"week-item__temp__max\">\r\n                    {maxTemp.toFixed(0)}\r\n                </span>\r\n                /\r\n                <span className=\"week-item__temp__min\">\r\n                    {minTemp.toFixed(0)}\r\n                </span>\r\n                <img src={`https://www.metaweather.com/static/img/weather/png/64/${weatherStateAbbr}.png`} alt=\"\"/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default WeekItem;","import React from \"react\";\r\nimport WeekItem from \"./WeekItem\";\r\n\r\nconst WeekItems = ({weekItems}) => {\r\n    return (\r\n        <div className=\"weather__week\">\r\n            {weekItems.map(item =>\r\n                <WeekItem key={item.id} weekItem={item}/>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WeekItems;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport WeekItems from \"./WeekItems\";\r\n\r\nclass Home extends Component {\r\n    static propTypes = {\r\n        weekItems: PropTypes.array,\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {fetchLocation} = this.props;\r\n\r\n        fetchLocation('moscow');\r\n    }\r\n\r\n    render() {\r\n        const {weekItems} = this.props;\r\n\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"tabs\">\r\n                    <span className=\"tabs__tab tabs__tab--active\">\r\n                        Today\r\n                    </span>\r\n                    <span className=\"tabs__tab\">\r\n                        Week\r\n                    </span>\r\n                </div>\r\n                <WeekItems weekItems={weekItems}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import camelize from \"camelize\";\r\n\r\nexport const callApi = (url, options) => {\r\n    return fetch(url, options)\r\n        .then(\r\n            response => response.ok ? response.json() : Promise.reject(response.text()),\r\n            error => Promise.reject(error),\r\n        )\r\n        .then(\r\n            json => ({json: camelize(json)}),\r\n            error => ({error}),\r\n        )\r\n        .catch(error => (camelize(error)))\r\n};","const API_ROOT = \"https://cors-anywhere.herokuapp.com/metaweather.com\";\r\n\r\nexport const SEARCH_CITY_URL = cityName => `${API_ROOT}/api/location/search/?query=${cityName}`;\r\nexport const WEEK_WEATHER_URL = woeid => `${API_ROOT}/api/location/${woeid}/`;","import * as types from \"../constants/ActionsTypes\";\r\nimport {callApi} from \"../utils/api\";\r\n\r\nimport {\r\n    SEARCH_CITY_URL,\r\n    WEEK_WEATHER_URL,\r\n} from \"../constants/ApiConstants\";\r\n\r\nconst fetchLocationSuccess = woeid => ({\r\n    type: types.FETCH_LOCATION_SUCCESS,\r\n    woeid,\r\n});\r\n\r\nexport const fetchLocation = (cityName) =>  async dispatch => {\r\n    const {json} = await callApi(SEARCH_CITY_URL(cityName));\r\n    const {woeid} = json[0];\r\n\r\n    dispatch(fetchLocationSuccess(woeid));\r\n\r\n    dispatch(fetchWeekWeathers(woeid));\r\n\r\n};\r\n\r\nconst fetchWeekWeathersSuccess = (consolidatedWeather, time, sunRise, sunSet) => ({\r\n    type: types.FETCH_WEEK_WEATHERS_SUCCESS,\r\n    consolidatedWeather,\r\n    time,\r\n    sunRise,\r\n    sunSet,\r\n});\r\n\r\nexport const fetchWeekWeathers = woeid => async dispatch => {\r\n    const {json} = await(callApi(WEEK_WEATHER_URL(woeid)));\r\n\r\n    const {consolidatedWeather, time, sunRise, sunSet} = json;\r\n\r\n    dispatch(fetchWeekWeathersSuccess(consolidatedWeather, time, sunRise, sunSet));\r\n};","export const getWeatherWeekItems = state => state.weather.consolidatedWeather;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Home from \"../components/Home\";\r\n\r\nimport {\r\n    fetchLocation\r\n} from \"../actions/weatherActions\";\r\nimport {\r\n    getWeatherWeekItems\r\n} from \"../selectors/weatherSelectors\";\r\n\r\nconst HomeContainer = props => <Home {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weekItems: getWeatherWeekItems(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchLocation,\r\n})(HomeContainer);"],"sourceRoot":""}