{"version":3,"sources":["serviceWorker.js","reducers/weather.js","constants/ActionsTypes.js","reducers/location.js","reducers/index.js","store/createStore.js","index.js","components/Tab.js","components/Tabs.js","utils/date.js","components/WeekItem.js","components/WeekItems.js","components/Today.js","components/Weather.js","utils/api.js","constants/ApiConstants.js","selectors/weatherSelectors.js","actions/weatherActions.js","containers/WeatherContainer.js"],"names":["Boolean","window","location","hostname","match","initialState","consolidatedWeather","today","activeTab","isFetching","weather","state","action","type","woeid","time","sunRise","sunSet","rootReducer","combineReducers","configureStore","composedEnhancers","composeWithDevTools","applyMiddleware","thunkMiddleware","createStore","Component","Tab","name","onClickTab","children","className","onClick","Tabs","weekDays","getWeekDay","dayNumber","monthNames","getMonthName","monthNumber","dateFormatForReq","date","getFullYear","getMonth","getDate","WeekItem","item","weatherStateAbbr","weatherStateName","minTemp","maxTemp","applicableDate","Date","getDay","toFixed","src","alt","WeekItems","this","props","fetchWeekWeathers","items","length","map","key","id","color","width","Today","fetchTodayWeathers","theTemp","created","Object","keys","weekDayNumber","renderDate","height","Weather","bind","tabName","switchTabs","weekItems","callApi","url","options","fetch","then","response","ok","json","Promise","reject","text","error","camelize","catch","API_ROOT","SEARCH_CITY_URL","cityName","WEEK_WEATHER_URL","TODAY_WEATHER_URL","getWoeid","getWeatherWeekItems","getTodayWeather","getWeatherActiveTab","weatherFetching","fetchLocationSuccess","fetchWeekWeathersSuccess","connect","fetchLocation","dispatch","a","getState","todayWeather","HomeContainer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e87ba66e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from \"../constants/ActionsTypes\";\r\n\r\nconst initialState = {\r\n    consolidatedWeather: [],\r\n    today: {},\r\n    activeTab: 'today',\r\n    isFetching: false,\r\n};\r\n\r\nconst weather = (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case types.FETCH_LOCATION_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                woeid: action.woeid,\r\n            }\r\n        }\r\n        case types.FETCH_WEEK_WEATHERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                consolidatedWeather: action.consolidatedWeather,\r\n                time: action.time,\r\n                sunRise: action.sunRise,\r\n                sunSet: action.sunSet,\r\n            }\r\n        }\r\n        case types.FETCH_TODAY_WEATHERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                today: action.today,\r\n            }\r\n        }\r\n        case types.SWITCH_TABS: {\r\n            return {\r\n                ...state,\r\n                activeTab: action.activeTab,\r\n            }\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default weather;","export const FETCH_LOCATION = \"FETCH_LOCATION\";\r\nexport const FETCH_LOCATION_SUCCESS = \"FETCH_LOCATION_SUCCESS\";\r\n\r\nexport const FETCH_WEEK_WEATHERS_SUCCESS = \"FETCH_WEEK_WEATHERS_SUCCESS\";\r\n\r\n\r\nexport const FETCH_TODAY_WEATHERS_SUCCESS = \"FETCH_TODAY_WEATHERS_SUCCESS\";\r\nexport const FETCH_TODAY_WEATHERS_ERROR = \"FETCH_TODAY_WEATHERS_ERROR\";\r\n\r\nexport const SWITCH_TABS = \"SWITCH_TABS\";","import * as types from \"../constants/ActionsTypes\";\n\nconst initialState = {\n    woeid: 2122265,//в реальном приложении будет null\n    time: null,\n    sunRise: null,\n    sunSet: null,\n};\n\n//редюсер для эмуляции реальной работы приложения\n//экшен выполняется в другом компонете(поиск) из которого компонент weather получает id локации\nconst location = (state=initialState, action) => {\n    switch(action.type) {\n        case types.FETCH_LOCATION_SUCCESS: {\n            return {\n                woeid: action.woeid,\n                time: action.time,\n                sunRise: action.sunRise,\n                sunSet: action.sunSet,\n            }\n        }\n        \n        default: return state;\n    }\n};\n\nexport default location;","import {combineReducers} from \"redux\";\r\nimport weather from './weather';\r\nimport location from \"./location\";\r\n\r\nconst rootReducer = combineReducers({\r\n    weather,\r\n    location,\r\n});\r\n\r\nexport default rootReducer;","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default function configureStore(initialState) {\r\n    const composedEnhancers = composeWithDevTools(applyMiddleware(thunkMiddleware));\r\n\r\n    const store = createStore(rootReducer, initialState, composedEnhancers);\r\n\r\n    if(module.hot) {\r\n        module.hot.accept('../reducers', () => {\r\n            store.replaceReducer(rootReducer);\r\n        })\r\n    }\r\n\r\n    return store;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport \"normalize.css\";\r\nimport './styles/index.scss';\r\n\r\nimport createStore from \"./store/createStore\";\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport {AppContainer} from \"react-hot-loader\";\r\nimport HomeContainer from \"./containers/WeatherContainer\";\r\n\r\nconst render = (Component) => {\r\n    ReactDOM.render(\r\n        <AppContainer>\r\n            <Provider store={createStore()}>\r\n                <Component/>\r\n            </Provider>\r\n        </AppContainer>,\r\n        document.getElementById('root')\r\n    );\r\n};\r\n\r\nrender(HomeContainer);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\n\r\nconst Tab = ({activeTab, name, onClickTab, children}) => {\r\n    return (\r\n        <span\r\n            className={`${activeTab === name ? 'tabs__tab tabs__tab--active' : 'tabs__tab'}`}\r\n            onClick={() => {onClickTab(name)}}>\r\n            {children}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default Tab;","import React from \"react\";\r\nimport Tab from \"./Tab\";\r\n\r\nconst Tabs = ({activeTab, onClickTab}) => {\r\n    return (\r\n        <div className=\"tabs\">\r\n            <Tab name=\"week\" onClickTab={onClickTab} activeTab={activeTab}>\r\n                Week\r\n            </Tab>\r\n\r\n            <Tab name=\"today\" onClickTab={onClickTab} activeTab={activeTab}>\r\n                Today\r\n            </Tab>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Tabs;","const weekDays = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\r\nexport const getWeekDay = dayNumber => weekDays[dayNumber];\r\n\r\nconst monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nexport const getMonthName = monthNumber => monthNames[monthNumber];\r\n\r\nexport const dateFormatForReq = date => `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}/`;","import React from \"react\";\r\nimport {getWeekDay, getMonthName} from \"../utils/date\";\r\n\r\nconst WeekItem = ({item}) => {\r\n\r\n    const {\r\n        weatherStateName,\r\n        weatherStateAbbr,\r\n        minTemp,\r\n        maxTemp,\r\n        applicableDate,\r\n    } = item;\r\n\r\n    const date = new Date(applicableDate);\r\n    return (\r\n        <div className={`week-item week-item--${weatherStateAbbr}`}>\r\n            <div className=\"week-item__date\">\r\n                <div className=\"week-item__week-day\">\r\n                    {getWeekDay(date.getDay())}\r\n                </div>\r\n                <div className=\"week-item__month-day\">\r\n                    {date.getDate()} {getMonthName(date.getMonth())}\r\n                </div>\r\n            </div>\r\n            <div className=\"week-item__right-col\">\r\n                <div className=\"week-item__temp\">\r\n                    <span className=\"week-item__temp__max\">\r\n                        {maxTemp.toFixed(0)}&deg;\r\n                    </span>\r\n                    &nbsp;/&nbsp;\r\n                    <span className=\"week-item__temp__min\">\r\n                    {minTemp.toFixed(0)}\r\n                </span>\r\n                </div>\r\n                <img src={`https://www.metaweather.com/static/img/weather/png/64/${weatherStateAbbr}.png`}\r\n                     className=\"week-item__img\"\r\n                     alt=\"\"/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default WeekItem;","import React, {Component} from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport WeekItem from \"./WeekItem\";\r\n\r\nclass WeekItems extends Component {\r\n    componentDidMount() {\r\n        const {fetchWeekWeathers, woeid} = this.props;\r\n\r\n        fetchWeekWeathers(woeid);\r\n    }\r\n\r\n    render() {\r\n        const {items} = this.props;\r\n\r\n        if(items.length) {\r\n            return (\r\n                <div className=\"weather__week-items\">\r\n                    {items.map(item =>\r\n                        <WeekItem key={item.id} item={item}/>\r\n                    )}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<Loader className=\"loader\" color=\"#cbd2d\" type=\"Bars\" width={50}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default WeekItems;","import React, {Component} from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport {getMonthName, getWeekDay} from \"../utils/date\";\r\n\r\nclass Today extends Component {\r\n    componentDidMount() {\r\n        const {fetchTodayWeathers, woeid} = this.props;\r\n        fetchTodayWeathers(woeid, new Date());\r\n    }\r\n\r\n    render() {\r\n        const renderDate = (date) => {\r\n            const weekDayNumber = new Date().getDay();\r\n            const monthNumber = new Date().getMonth();\r\n            return `${getWeekDay(weekDayNumber)}, ${monthNumber} ${getMonthName(monthNumber)}`;\r\n        };\r\n\r\n        const {\r\n            minTemp,\r\n            maxTemp,\r\n            theTemp,\r\n            created,\r\n            applicableDate,\r\n            weatherStateAbbr,\r\n            weatherStateName\r\n        } = this.props.today;\r\n\r\n        if (Object.keys(this.props.today).length) {\r\n            return (\r\n                <div className={`weather__today weather__today--${weatherStateAbbr}`}>\r\n                    <div className=\"weather__today__date\">\r\n                        {renderDate(applicableDate)}\r\n                    </div>\r\n                    <img src={`https://www.metaweather.com/static/img/weather/${weatherStateAbbr}.svg`}\r\n                         className=\"weather__today__img\"\r\n                         alt=\"\"/>\r\n                    <div className=\"weather__today__temp-type\">\r\n                        {weatherStateName}\r\n                    </div>\r\n                    <div className=\"weather__today__temp\">\r\n                        {theTemp.toFixed(0)}&deg;\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<Loader className=\"loader\" type=\"Bars\" color=\"#cbd2d\" width={50} height={50}/>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default Today;","import React, {Component} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nimport Tabs from \"./Tabs\";\r\nimport WeekItems from \"./WeekItems\";\r\nimport Today from \"./Today\";\r\n\r\nclass Weather extends Component {\r\n    static propTypes = {\r\n        weekItems: PropTypes.array.isRequired,\r\n        today: PropTypes.object.isRequired,\r\n        woeid: PropTypes.number.isRequired,\r\n        activeTab: PropTypes.string.isRequired,\r\n        isFetching: PropTypes.bool.isRequired,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickTab = this.onClickTab.bind(this);\r\n    }\r\n\r\n    onClickTab(tabName) {\r\n        const {\r\n            switchTabs,\r\n            activeTab,\r\n        } = this.props;\r\n\r\n        if(activeTab !== tabName) {\r\n            switchTabs(tabName);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            weekItems,\r\n            fetchWeekWeathers,\r\n            fetchTodayWeathers,\r\n            woeid,\r\n            activeTab,\r\n            today,\r\n            isFetching,\r\n        } = this.props;\r\n\r\n        if(isFetching) {\r\n            return (<Loader type=\"Bars\" color=\"#cbd2d\" width={50} height={50}/>)\r\n        }\r\n\r\n        return (\r\n            <div className={`wrapper ${activeTab === 'today' ? `wrapper--${today.weatherStateAbbr}` : '' }`}>\r\n                <Tabs activeTab={activeTab} onClickTab={this.onClickTab}/>\r\n\r\n                {activeTab === 'today' ?\r\n                    <Today fetchTodayWeathers={fetchTodayWeathers}\r\n                           woeid={woeid}\r\n                           today={today}\r\n                    /> : ''}\r\n                {activeTab === 'week' ?\r\n                    <WeekItems fetchWeekWeathers={fetchWeekWeathers}\r\n                               woeid={woeid}\r\n                               items={weekItems}\r\n                    />\r\n                    : ''}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import camelize from \"camelize\";\r\n\r\nexport const callApi = (url, options) => {\r\n    return fetch(url, options)\r\n        .then(\r\n            response => response.ok ? response.json() : Promise.reject(response.text()),\r\n            error => Promise.reject(error),\r\n        )\r\n        .then(\r\n            json => ({json: camelize(json)}),\r\n            error => ({error}),\r\n        )\r\n        .catch(error => (camelize(error)))\r\n};","const API_ROOT = \"https://cors-anywhere.herokuapp.com/metaweather.com\";\r\n\r\nexport const SEARCH_CITY_URL = cityName => `${API_ROOT}/api/location/search/?query=${cityName}`;\r\nexport const WEEK_WEATHER_URL = woeid => `${API_ROOT}/api/location/${woeid}/`;\r\nexport const TODAY_WEATHER_URL = (woeid, date) => `${API_ROOT}/api/location/${woeid}/${date}`;","export const getWoeid = state => state.location.woeid;\r\n\r\nexport const getWeatherWeekItems = state => state.weather.consolidatedWeather;\r\nexport const getTodayWeather = state => state.weather.today;\r\nexport const getWeatherActiveTab = state => state.weather.activeTab;\r\nexport const weatherFetching = state => state.weather.isFetching;","import * as types from \"../constants/ActionsTypes\";\r\nimport {callApi} from \"../utils/api\";\r\nimport {dateFormatForReq} from \"../utils/date\";\r\n\r\nimport {\r\n    SEARCH_CITY_URL,\r\n    WEEK_WEATHER_URL,\r\n    TODAY_WEATHER_URL,\r\n} from \"../constants/ApiConstants\";\r\n\r\nimport {getTodayWeather} from \"../selectors/weatherSelectors\";\r\n\r\nconst fetchLocationSuccess = woeid => ({\r\n    type: types.FETCH_LOCATION_SUCCESS,\r\n    woeid,\r\n});\r\n\r\nexport const fetchLocation = (cityName) => async dispatch => {\r\n    const {json} = await callApi(SEARCH_CITY_URL(cityName));\r\n    const {woeid} = json[0];\r\n\r\n    dispatch(fetchLocationSuccess(woeid));\r\n    // dispatch(fetchWeekWeathers(woeid));\r\n};\r\n\r\nconst fetchWeekWeathersSuccess = (consolidatedWeather, time, sunRise, sunSet) => ({\r\n    type: types.FETCH_WEEK_WEATHERS_SUCCESS,\r\n    consolidatedWeather,\r\n    time,\r\n    sunRise,\r\n    sunSet,\r\n});\r\n\r\nexport const fetchWeekWeathers = woeid => async dispatch => {\r\n    const {json} = await (callApi(WEEK_WEATHER_URL(woeid)));\r\n\r\n    const {consolidatedWeather, time, sunRise, sunSet} = json;\r\n\r\n    dispatch(fetchWeekWeathersSuccess(consolidatedWeather, time, sunRise, sunSet));\r\n};\r\n\r\nconst fetchTodayWeathersSuccess = (today) => ({\r\n    type: types.FETCH_TODAY_WEATHERS_SUCCESS,\r\n    today,\r\n});\r\n\r\nexport const fetchTodayWeathers = (woeid, date) => async (dispatch, getState) => {\r\n    const state = getState();\r\n    const todayWeather = getTodayWeather(state);\r\n\r\n    if(!Object.keys(todayWeather).length) {\r\n        const {json} = await callApi(TODAY_WEATHER_URL(woeid, dateFormatForReq(date)));\r\n\r\n        dispatch(fetchTodayWeathersSuccess(json[0]));\r\n    }\r\n};\r\n\r\nexport const switchTabs = activeTab => dispatch => {\r\n    dispatch({type: types.SWITCH_TABS, activeTab,});\r\n};","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Weather from \"../components/Weather\";\r\n\r\nimport {\r\n    fetchLocation,\r\n    fetchTodayWeathers,\r\n    switchTabs,\r\n    fetchWeekWeathers,\r\n} from \"../actions/weatherActions\";\r\nimport {\r\n    getWeatherWeekItems,\r\n    getWoeid,\r\n    getTodayWeather,\r\n    getWeatherActiveTab,\r\n    weatherFetching,\r\n} from \"../selectors/weatherSelectors\";\r\n\r\nconst WeatherContainer = props => <Weather {...props}/>;\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weekItems: getWeatherWeekItems(state),\r\n        woeid: getWoeid(state),\r\n        today: getTodayWeather(state),\r\n        activeTab: getWeatherActiveTab(state),\r\n        isFetching: weatherFetching(state),\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    fetchLocation,\r\n    fetchTodayWeathers,\r\n    switchTabs,\r\n    fetchWeekWeathers,\r\n})(WeatherContainer);"],"sourceRoot":""}